
SevenSegementDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ea4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001ea4  00001f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00001f40  2**0
                  ALLOC
  3 .stab         00001188  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009b4  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00003d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007610  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000079fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000081cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ea       	ldi	r30, 0xA4	; 164
      78:	fe e1       	ldi	r31, 0x1E	; 30
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 ed 08 	call	0x11da	; 0x11da <main>
      8a:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DioSetPinDirection>:
#include "BIT_MATH.h"
#include "DIO_Interface.h"
#include "DIO_Private.h"

void DioSetPinDirection(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03

		if(Copy_u8pin <= PIN7)
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	08 f0       	brcs	.+2      	; 0xb68 <DioSetPinDirection+0x22>
     b66:	ea c0       	rjmp	.+468    	; 0xd3c <DioSetPinDirection+0x1f6>
		{
			if(Copy_u8direction == INPUT)
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	88 23       	and	r24, r24
     b6c:	09 f0       	breq	.+2      	; 0xb70 <DioSetPinDirection+0x2a>
     b6e:	74 c0       	rjmp	.+232    	; 0xc58 <DioSetPinDirection+0x112>
			{
				switch(Copy_u8port)
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	3f 83       	std	Y+7, r19	; 0x07
     b78:	2e 83       	std	Y+6, r18	; 0x06
     b7a:	8e 81       	ldd	r24, Y+6	; 0x06
     b7c:	9f 81       	ldd	r25, Y+7	; 0x07
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	91 05       	cpc	r25, r1
     b82:	59 f1       	breq	.+86     	; 0xbda <DioSetPinDirection+0x94>
     b84:	2e 81       	ldd	r18, Y+6	; 0x06
     b86:	3f 81       	ldd	r19, Y+7	; 0x07
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	2c f4       	brge	.+10     	; 0xb98 <DioSetPinDirection+0x52>
     b8e:	8e 81       	ldd	r24, Y+6	; 0x06
     b90:	9f 81       	ldd	r25, Y+7	; 0x07
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	69 f0       	breq	.+26     	; 0xbb0 <DioSetPinDirection+0x6a>
     b96:	d2 c0       	rjmp	.+420    	; 0xd3c <DioSetPinDirection+0x1f6>
     b98:	2e 81       	ldd	r18, Y+6	; 0x06
     b9a:	3f 81       	ldd	r19, Y+7	; 0x07
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	31 05       	cpc	r19, r1
     ba0:	89 f1       	breq	.+98     	; 0xc04 <DioSetPinDirection+0xbe>
     ba2:	8e 81       	ldd	r24, Y+6	; 0x06
     ba4:	9f 81       	ldd	r25, Y+7	; 0x07
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	91 05       	cpc	r25, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <DioSetPinDirection+0x68>
     bac:	40 c0       	rjmp	.+128    	; 0xc2e <DioSetPinDirection+0xe8>
     bae:	c6 c0       	rjmp	.+396    	; 0xd3c <DioSetPinDirection+0x1f6>
				{
				case portA:
					CLR_BIT(DDRA,Copy_u8pin);
     bb0:	aa e3       	ldi	r26, 0x3A	; 58
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e3       	ldi	r30, 0x3A	; 58
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DioSetPinDirection+0x88>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DioSetPinDirection+0x84>
     bd2:	80 95       	com	r24
     bd4:	84 23       	and	r24, r20
     bd6:	8c 93       	st	X, r24
     bd8:	b1 c0       	rjmp	.+354    	; 0xd3c <DioSetPinDirection+0x1f6>
					break;
				case portB:
					CLR_BIT(DDRB,Copy_u8pin);
     bda:	a7 e3       	ldi	r26, 0x37	; 55
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e3       	ldi	r30, 0x37	; 55
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <DioSetPinDirection+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <DioSetPinDirection+0xae>
     bfc:	80 95       	com	r24
     bfe:	84 23       	and	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	9c c0       	rjmp	.+312    	; 0xd3c <DioSetPinDirection+0x1f6>
					break;
				case portC:
					CLR_BIT(DDRC,Copy_u8pin);
     c04:	a4 e3       	ldi	r26, 0x34	; 52
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e4 e3       	ldi	r30, 0x34	; 52
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DioSetPinDirection+0xdc>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DioSetPinDirection+0xd8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	87 c0       	rjmp	.+270    	; 0xd3c <DioSetPinDirection+0x1f6>
					break;
				case portD:
					CLR_BIT(DDRD,Copy_u8pin);
     c2e:	a1 e3       	ldi	r26, 0x31	; 49
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e1 e3       	ldi	r30, 0x31	; 49
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	48 2f       	mov	r20, r24
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	28 2f       	mov	r18, r24
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 2e       	mov	r0, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DioSetPinDirection+0x106>
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	0a 94       	dec	r0
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DioSetPinDirection+0x102>
     c50:	80 95       	com	r24
     c52:	84 23       	and	r24, r20
     c54:	8c 93       	st	X, r24
     c56:	72 c0       	rjmp	.+228    	; 0xd3c <DioSetPinDirection+0x1f6>
				default:

					break;
				}
			}
			else if(Copy_u8direction == OUTPUT)
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	09 f0       	breq	.+2      	; 0xc60 <DioSetPinDirection+0x11a>
     c5e:	6e c0       	rjmp	.+220    	; 0xd3c <DioSetPinDirection+0x1f6>
			{
				switch(Copy_u8port)
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	3d 83       	std	Y+5, r19	; 0x05
     c68:	2c 83       	std	Y+4, r18	; 0x04
     c6a:	8c 81       	ldd	r24, Y+4	; 0x04
     c6c:	9d 81       	ldd	r25, Y+5	; 0x05
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	91 05       	cpc	r25, r1
     c72:	49 f1       	breq	.+82     	; 0xcc6 <DioSetPinDirection+0x180>
     c74:	2c 81       	ldd	r18, Y+4	; 0x04
     c76:	3d 81       	ldd	r19, Y+5	; 0x05
     c78:	22 30       	cpi	r18, 0x02	; 2
     c7a:	31 05       	cpc	r19, r1
     c7c:	2c f4       	brge	.+10     	; 0xc88 <DioSetPinDirection+0x142>
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	61 f0       	breq	.+24     	; 0xc9e <DioSetPinDirection+0x158>
     c86:	5a c0       	rjmp	.+180    	; 0xd3c <DioSetPinDirection+0x1f6>
     c88:	2c 81       	ldd	r18, Y+4	; 0x04
     c8a:	3d 81       	ldd	r19, Y+5	; 0x05
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	71 f1       	breq	.+92     	; 0xcee <DioSetPinDirection+0x1a8>
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	9d 81       	ldd	r25, Y+5	; 0x05
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	91 05       	cpc	r25, r1
     c9a:	e9 f1       	breq	.+122    	; 0xd16 <DioSetPinDirection+0x1d0>
     c9c:	4f c0       	rjmp	.+158    	; 0xd3c <DioSetPinDirection+0x1f6>
				{
				case portA:
					SET_BIT(DDRA,Copy_u8pin);
     c9e:	aa e3       	ldi	r26, 0x3A	; 58
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	ea e3       	ldi	r30, 0x3A	; 58
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DioSetPinDirection+0x176>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DioSetPinDirection+0x172>
     cc0:	84 2b       	or	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	3b c0       	rjmp	.+118    	; 0xd3c <DioSetPinDirection+0x1f6>
					break;
				case portB:
					SET_BIT(DDRB,Copy_u8pin);
     cc6:	a7 e3       	ldi	r26, 0x37	; 55
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e7 e3       	ldi	r30, 0x37	; 55
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 2e       	mov	r0, r18
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DioSetPinDirection+0x19e>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DioSetPinDirection+0x19a>
     ce8:	84 2b       	or	r24, r20
     cea:	8c 93       	st	X, r24
     cec:	27 c0       	rjmp	.+78     	; 0xd3c <DioSetPinDirection+0x1f6>
					break;
				case portC:
					SET_BIT(DDRC,Copy_u8pin);
     cee:	a4 e3       	ldi	r26, 0x34	; 52
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e4 e3       	ldi	r30, 0x34	; 52
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DioSetPinDirection+0x1c6>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DioSetPinDirection+0x1c2>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	13 c0       	rjmp	.+38     	; 0xd3c <DioSetPinDirection+0x1f6>
					break;
				case portD:
					SET_BIT(DDRD,Copy_u8pin);
     d16:	a1 e3       	ldi	r26, 0x31	; 49
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e1 e3       	ldi	r30, 0x31	; 49
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DioSetPinDirection+0x1ee>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DioSetPinDirection+0x1ea>
     d38:	84 2b       	or	r24, r20
     d3a:	8c 93       	st	X, r24

		else
		{

		}
}
     d3c:	27 96       	adiw	r28, 0x07	; 7
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <DioSetPinValue>:
void DioSetPinValue(u8 Copy_u8port,u8 Copy_u8pin, u8 Copy_u8value)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	27 97       	sbiw	r28, 0x07	; 7
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	6a 83       	std	Y+2, r22	; 0x02
     d66:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8pin<=PIN7)
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 30       	cpi	r24, 0x08	; 8
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <DioSetPinValue+0x22>
     d6e:	ea c0       	rjmp	.+468    	; 0xf44 <DioSetPinValue+0x1f6>
		{
			if(Copy_u8value == HIGH)
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	09 f0       	breq	.+2      	; 0xd78 <DioSetPinValue+0x2a>
     d76:	6f c0       	rjmp	.+222    	; 0xe56 <DioSetPinValue+0x108>
			{
				switch(Copy_u8port)
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	3f 83       	std	Y+7, r19	; 0x07
     d80:	2e 83       	std	Y+6, r18	; 0x06
     d82:	8e 81       	ldd	r24, Y+6	; 0x06
     d84:	9f 81       	ldd	r25, Y+7	; 0x07
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	49 f1       	breq	.+82     	; 0xdde <DioSetPinValue+0x90>
     d8c:	2e 81       	ldd	r18, Y+6	; 0x06
     d8e:	3f 81       	ldd	r19, Y+7	; 0x07
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	31 05       	cpc	r19, r1
     d94:	2c f4       	brge	.+10     	; 0xda0 <DioSetPinValue+0x52>
     d96:	8e 81       	ldd	r24, Y+6	; 0x06
     d98:	9f 81       	ldd	r25, Y+7	; 0x07
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	61 f0       	breq	.+24     	; 0xdb6 <DioSetPinValue+0x68>
     d9e:	d2 c0       	rjmp	.+420    	; 0xf44 <DioSetPinValue+0x1f6>
     da0:	2e 81       	ldd	r18, Y+6	; 0x06
     da2:	3f 81       	ldd	r19, Y+7	; 0x07
     da4:	22 30       	cpi	r18, 0x02	; 2
     da6:	31 05       	cpc	r19, r1
     da8:	71 f1       	breq	.+92     	; 0xe06 <DioSetPinValue+0xb8>
     daa:	8e 81       	ldd	r24, Y+6	; 0x06
     dac:	9f 81       	ldd	r25, Y+7	; 0x07
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	91 05       	cpc	r25, r1
     db2:	e9 f1       	breq	.+122    	; 0xe2e <DioSetPinValue+0xe0>
     db4:	c7 c0       	rjmp	.+398    	; 0xf44 <DioSetPinValue+0x1f6>
				{
				case portA:
					SET_BIT(PORTA,Copy_u8pin);
     db6:	ab e3       	ldi	r26, 0x3B	; 59
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e3       	ldi	r30, 0x3B	; 59
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DioSetPinValue+0x86>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DioSetPinValue+0x82>
     dd8:	84 2b       	or	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	b3 c0       	rjmp	.+358    	; 0xf44 <DioSetPinValue+0x1f6>
					break;
				case portB:
					SET_BIT(PORTB,Copy_u8pin);
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DioSetPinValue+0xae>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DioSetPinValue+0xaa>
     e00:	84 2b       	or	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	9f c0       	rjmp	.+318    	; 0xf44 <DioSetPinValue+0x1f6>
					break;
				case portC:
					SET_BIT(PORTC,Copy_u8pin);
     e06:	a5 e3       	ldi	r26, 0x35	; 53
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e5 e3       	ldi	r30, 0x35	; 53
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DioSetPinValue+0xd6>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DioSetPinValue+0xd2>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	8b c0       	rjmp	.+278    	; 0xf44 <DioSetPinValue+0x1f6>
					break;
				case portD:
					SET_BIT(PORTD,Copy_u8pin);
     e2e:	a2 e3       	ldi	r26, 0x32	; 50
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e2 e3       	ldi	r30, 0x32	; 50
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DioSetPinValue+0xfe>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DioSetPinValue+0xfa>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	77 c0       	rjmp	.+238    	; 0xf44 <DioSetPinValue+0x1f6>
				default:

					break;
				}
			}
			else if(Copy_u8value == LOW)
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	88 23       	and	r24, r24
     e5a:	09 f0       	breq	.+2      	; 0xe5e <DioSetPinValue+0x110>
     e5c:	73 c0       	rjmp	.+230    	; 0xf44 <DioSetPinValue+0x1f6>
			{
				switch(Copy_u8port)
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3d 83       	std	Y+5, r19	; 0x05
     e66:	2c 83       	std	Y+4, r18	; 0x04
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	91 05       	cpc	r25, r1
     e70:	59 f1       	breq	.+86     	; 0xec8 <DioSetPinValue+0x17a>
     e72:	2c 81       	ldd	r18, Y+4	; 0x04
     e74:	3d 81       	ldd	r19, Y+5	; 0x05
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	2c f4       	brge	.+10     	; 0xe86 <DioSetPinValue+0x138>
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	69 f0       	breq	.+26     	; 0xe9e <DioSetPinValue+0x150>
     e84:	5f c0       	rjmp	.+190    	; 0xf44 <DioSetPinValue+0x1f6>
     e86:	2c 81       	ldd	r18, Y+4	; 0x04
     e88:	3d 81       	ldd	r19, Y+5	; 0x05
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	89 f1       	breq	.+98     	; 0xef2 <DioSetPinValue+0x1a4>
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <DioSetPinValue+0x14e>
     e9a:	40 c0       	rjmp	.+128    	; 0xf1c <DioSetPinValue+0x1ce>
     e9c:	53 c0       	rjmp	.+166    	; 0xf44 <DioSetPinValue+0x1f6>
				{
				case portA:
					CLR_BIT(PORTA,Copy_u8pin);
     e9e:	ab e3       	ldi	r26, 0x3B	; 59
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	eb e3       	ldi	r30, 0x3B	; 59
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DioSetPinValue+0x16e>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DioSetPinValue+0x16a>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	3e c0       	rjmp	.+124    	; 0xf44 <DioSetPinValue+0x1f6>
					break;
				case portB:
					CLR_BIT(PORTB,Copy_u8pin);
     ec8:	a8 e3       	ldi	r26, 0x38	; 56
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e8 e3       	ldi	r30, 0x38	; 56
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DioSetPinValue+0x198>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DioSetPinValue+0x194>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	29 c0       	rjmp	.+82     	; 0xf44 <DioSetPinValue+0x1f6>
					break;
				case portC:
					CLR_BIT(PORTC,Copy_u8pin);
     ef2:	a5 e3       	ldi	r26, 0x35	; 53
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e5 e3       	ldi	r30, 0x35	; 53
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DioSetPinValue+0x1c2>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DioSetPinValue+0x1be>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <DioSetPinValue+0x1f6>
					break;
				case portD:
					CLR_BIT(PORTD,Copy_u8pin);
     f1c:	a2 e3       	ldi	r26, 0x32	; 50
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e2 e3       	ldi	r30, 0x32	; 50
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DioSetPinValue+0x1ec>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DioSetPinValue+0x1e8>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
		{

		}


}
     f44:	27 96       	adiw	r28, 0x07	; 7
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <DioGetPinValue>:
u8 DioGetPinValue(u8 Copy_u8port, u8 Copy_u8pin)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <DioGetPinValue+0x6>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <DioGetPinValue+0x8>
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	8a 83       	std	Y+2, r24	; 0x02
     f66:	6b 83       	std	Y+3, r22	; 0x03

	u8 pinStatus =0;
     f68:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_u8pin<=PIN7)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	88 30       	cpi	r24, 0x08	; 8
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <DioGetPinValue+0x1c>
     f70:	67 c0       	rjmp	.+206    	; 0x1040 <DioGetPinValue+0xea>
		{
			switch(Copy_u8port)
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	3d 83       	std	Y+5, r19	; 0x05
     f7a:	2c 83       	std	Y+4, r18	; 0x04
     f7c:	4c 81       	ldd	r20, Y+4	; 0x04
     f7e:	5d 81       	ldd	r21, Y+5	; 0x05
     f80:	41 30       	cpi	r20, 0x01	; 1
     f82:	51 05       	cpc	r21, r1
     f84:	41 f1       	breq	.+80     	; 0xfd6 <DioGetPinValue+0x80>
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	91 05       	cpc	r25, r1
     f8e:	34 f4       	brge	.+12     	; 0xf9c <DioGetPinValue+0x46>
     f90:	2c 81       	ldd	r18, Y+4	; 0x04
     f92:	3d 81       	ldd	r19, Y+5	; 0x05
     f94:	21 15       	cp	r18, r1
     f96:	31 05       	cpc	r19, r1
     f98:	61 f0       	breq	.+24     	; 0xfb2 <DioGetPinValue+0x5c>
     f9a:	52 c0       	rjmp	.+164    	; 0x1040 <DioGetPinValue+0xea>
     f9c:	4c 81       	ldd	r20, Y+4	; 0x04
     f9e:	5d 81       	ldd	r21, Y+5	; 0x05
     fa0:	42 30       	cpi	r20, 0x02	; 2
     fa2:	51 05       	cpc	r21, r1
     fa4:	51 f1       	breq	.+84     	; 0xffa <DioGetPinValue+0xa4>
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	b9 f1       	breq	.+110    	; 0x101e <DioGetPinValue+0xc8>
     fb0:	47 c0       	rjmp	.+142    	; 0x1040 <DioGetPinValue+0xea>
			{
			case portA:
				pinStatus = GET_BIT(PINA,Copy_u8pin);
     fb2:	e9 e3       	ldi	r30, 0x39	; 57
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a9 01       	movw	r20, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DioGetPinValue+0x74>
     fc6:	55 95       	asr	r21
     fc8:	47 95       	ror	r20
     fca:	8a 95       	dec	r24
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DioGetPinValue+0x70>
     fce:	ca 01       	movw	r24, r20
     fd0:	81 70       	andi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	35 c0       	rjmp	.+106    	; 0x1040 <DioGetPinValue+0xea>
				break;
			case portB:
				pinStatus = GET_BIT(PINB,Copy_u8pin);
     fd6:	e6 e3       	ldi	r30, 0x36	; 54
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DioGetPinValue+0x98>
     fea:	55 95       	asr	r21
     fec:	47 95       	ror	r20
     fee:	8a 95       	dec	r24
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DioGetPinValue+0x94>
     ff2:	ca 01       	movw	r24, r20
     ff4:	81 70       	andi	r24, 0x01	; 1
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	23 c0       	rjmp	.+70     	; 0x1040 <DioGetPinValue+0xea>
				break;
			case portC:
				pinStatus = GET_BIT(PINC,Copy_u8pin);
     ffa:	e3 e3       	ldi	r30, 0x33	; 51
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DioGetPinValue+0xbc>
    100e:	55 95       	asr	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DioGetPinValue+0xb8>
    1016:	ca 01       	movw	r24, r20
    1018:	81 70       	andi	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <DioGetPinValue+0xea>
				break;
			case portD:
				pinStatus = GET_BIT(PIND,Copy_u8pin);
    101e:	e0 e3       	ldi	r30, 0x30	; 48
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DioGetPinValue+0xe0>
    1032:	55 95       	asr	r21
    1034:	47 95       	ror	r20
    1036:	8a 95       	dec	r24
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DioGetPinValue+0xdc>
    103a:	ca 01       	movw	r24, r20
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01
		else
		{

		}

	return pinStatus;
    1040:	89 81       	ldd	r24, Y+1	; 0x01
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <DioSetPortDirection>:

void DioSetPortDirection(u8 Copy_u8port, u8 Copy_u8direction)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <DioSetPortDirection+0x6>
    1058:	00 d0       	rcall	.+0      	; 0x105a <DioSetPortDirection+0x8>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8port)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3c 83       	std	Y+4, r19	; 0x04
    106a:	2b 83       	std	Y+3, r18	; 0x03
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	d1 f0       	breq	.+52     	; 0x10aa <DioSetPortDirection+0x58>
    1076:	2b 81       	ldd	r18, Y+3	; 0x03
    1078:	3c 81       	ldd	r19, Y+4	; 0x04
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	2c f4       	brge	.+10     	; 0x108a <DioSetPortDirection+0x38>
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	61 f0       	breq	.+24     	; 0x10a0 <DioSetPortDirection+0x4e>
    1088:	1e c0       	rjmp	.+60     	; 0x10c6 <DioSetPortDirection+0x74>
    108a:	2b 81       	ldd	r18, Y+3	; 0x03
    108c:	3c 81       	ldd	r19, Y+4	; 0x04
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	81 f0       	breq	.+32     	; 0x10b4 <DioSetPortDirection+0x62>
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	81 f0       	breq	.+32     	; 0x10be <DioSetPortDirection+0x6c>
    109e:	13 c0       	rjmp	.+38     	; 0x10c6 <DioSetPortDirection+0x74>
		{
		case portA:
			DDRA = Copy_u8direction;
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 83       	st	Z, r24
    10a8:	0e c0       	rjmp	.+28     	; 0x10c6 <DioSetPortDirection+0x74>
			break;
		case portB:
			DDRB = Copy_u8direction;
    10aa:	e7 e3       	ldi	r30, 0x37	; 55
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	80 83       	st	Z, r24
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <DioSetPortDirection+0x74>
			break;
		case portC:
			DDRC = Copy_u8direction;
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	80 83       	st	Z, r24
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <DioSetPortDirection+0x74>
			break;
		case portD:
			DDRD = Copy_u8direction;
    10be:	e1 e3       	ldi	r30, 0x31	; 49
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	80 83       	st	Z, r24
		default:

			break;

		}
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <DioSetPortValue>:
void DioSetPortValue(u8 Copy_u8port, u8 Copy_u8value)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <DioSetPortValue+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <DioSetPortValue+0x8>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8port)
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3c 83       	std	Y+4, r19	; 0x04
    10ec:	2b 83       	std	Y+3, r18	; 0x03
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	d1 f0       	breq	.+52     	; 0x112c <DioSetPortValue+0x58>
    10f8:	2b 81       	ldd	r18, Y+3	; 0x03
    10fa:	3c 81       	ldd	r19, Y+4	; 0x04
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	2c f4       	brge	.+10     	; 0x110c <DioSetPortValue+0x38>
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	61 f0       	breq	.+24     	; 0x1122 <DioSetPortValue+0x4e>
    110a:	1e c0       	rjmp	.+60     	; 0x1148 <DioSetPortValue+0x74>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	81 f0       	breq	.+32     	; 0x1136 <DioSetPortValue+0x62>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	81 f0       	breq	.+32     	; 0x1140 <DioSetPortValue+0x6c>
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <DioSetPortValue+0x74>
			{
			case portA:
				PORTA = Copy_u8value;
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
    112a:	0e c0       	rjmp	.+28     	; 0x1148 <DioSetPortValue+0x74>
				break;
			case portB:
				PORTC = Copy_u8value;
    112c:	e5 e3       	ldi	r30, 0x35	; 53
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	80 83       	st	Z, r24
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <DioSetPortValue+0x74>
				break;
			case portC:
				PORTC = Copy_u8value;
    1136:	e5 e3       	ldi	r30, 0x35	; 53
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	80 83       	st	Z, r24
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <DioSetPortValue+0x74>
				break;
			case portD:
				PORTD = Copy_u8value;
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 83       	st	Z, r24
			default:

				break;

			}
}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <DioGetPortValue>:
u8 DioGetPortValue(u8 Copy_u8port)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	00 d0       	rcall	.+0      	; 0x115c <DioGetPortValue+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <DioGetPortValue+0x8>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	8a 83       	std	Y+2, r24	; 0x02
	u8 portValue=0;
    1164:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3c 83       	std	Y+4, r19	; 0x04
    116e:	2b 83       	std	Y+3, r18	; 0x03
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	d1 f0       	breq	.+52     	; 0x11ae <DioGetPortValue+0x58>
    117a:	2b 81       	ldd	r18, Y+3	; 0x03
    117c:	3c 81       	ldd	r19, Y+4	; 0x04
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	2c f4       	brge	.+10     	; 0x118e <DioGetPortValue+0x38>
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 f0       	breq	.+24     	; 0x11a4 <DioGetPortValue+0x4e>
    118c:	1e c0       	rjmp	.+60     	; 0x11ca <DioGetPortValue+0x74>
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	3c 81       	ldd	r19, Y+4	; 0x04
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	81 f0       	breq	.+32     	; 0x11b8 <DioGetPortValue+0x62>
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	81 f0       	breq	.+32     	; 0x11c2 <DioGetPortValue+0x6c>
    11a2:	13 c0       	rjmp	.+38     	; 0x11ca <DioGetPortValue+0x74>
				{
				case portA:
					portValue = PINA;
    11a4:	e9 e3       	ldi	r30, 0x39	; 57
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	0e c0       	rjmp	.+28     	; 0x11ca <DioGetPortValue+0x74>
					break;
				case portB:
					portValue = PINB;
    11ae:	e6 e3       	ldi	r30, 0x36	; 54
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <DioGetPortValue+0x74>
					break;
				case portC:
					portValue = PINC;
    11b8:	e3 e3       	ldi	r30, 0x33	; 51
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <DioGetPortValue+0x74>
					break;
				case portD:
					portValue = PIND;
    11c2:	e0 e3       	ldi	r30, 0x30	; 48
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	89 83       	std	Y+1, r24	; 0x01
				default:

					break;

				}
	return portValue;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <main>:
#include "DIO_Private.h"

#include "sevenSegment.h"
#include <util/delay.h>
void main(void)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	sevenSegmentInit(portC);
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <sevenSegmentInit>

	while(1)
	{

			DisplaytoNumber(portC,99);
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	63 e6       	ldi	r22, 0x63	; 99
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	0e 94 57 09 	call	0x12ae	; 0x12ae <DisplaytoNumber>
    11f2:	fa cf       	rjmp	.-12     	; 0x11e8 <main+0xe>

000011f4 <sevenSegmentInit>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#include <util/delay.h>

void sevenSegmentInit(u8 Copy_u8port)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <sevenSegmentInit+0x6>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	89 83       	std	Y+1, r24	; 0x01
	DioSetPinDirection(portB,PIN0,OUTPUT);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	0e 94 a3 05 	call	0xb46	; 0xb46 <DioSetPinDirection>
	DioSetPinDirection(portB,PIN1,OUTPUT);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	0e 94 a3 05 	call	0xb46	; 0xb46 <DioSetPinDirection>
	switch(Copy_u8port)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3b 83       	std	Y+3, r19	; 0x03
    121e:	2a 83       	std	Y+2, r18	; 0x02
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	9b 81       	ldd	r25, Y+3	; 0x03
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	91 05       	cpc	r25, r1
    1228:	f9 f0       	breq	.+62     	; 0x1268 <sevenSegmentInit+0x74>
    122a:	2a 81       	ldd	r18, Y+2	; 0x02
    122c:	3b 81       	ldd	r19, Y+3	; 0x03
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	2c f4       	brge	.+10     	; 0x123e <sevenSegmentInit+0x4a>
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	9b 81       	ldd	r25, Y+3	; 0x03
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	61 f0       	breq	.+24     	; 0x1254 <sevenSegmentInit+0x60>
    123c:	32 c0       	rjmp	.+100    	; 0x12a2 <sevenSegmentInit+0xae>
    123e:	2a 81       	ldd	r18, Y+2	; 0x02
    1240:	3b 81       	ldd	r19, Y+3	; 0x03
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	d1 f0       	breq	.+52     	; 0x127c <sevenSegmentInit+0x88>
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	f9 f0       	breq	.+62     	; 0x1290 <sevenSegmentInit+0x9c>
    1252:	27 c0       	rjmp	.+78     	; 0x12a2 <sevenSegmentInit+0xae>
	{
	case portA:
		DioSetPortDirection(portA,PORTA | 0x01);
    1254:	eb e3       	ldi	r30, 0x3B	; 59
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	98 2f       	mov	r25, r24
    125c:	91 60       	ori	r25, 0x01	; 1
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	69 2f       	mov	r22, r25
    1262:	0e 94 29 08 	call	0x1052	; 0x1052 <DioSetPortDirection>
    1266:	1d c0       	rjmp	.+58     	; 0x12a2 <sevenSegmentInit+0xae>
		break;
	case portB:
		DioSetPortDirection(portB,PORTB | 0x01);
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	98 2f       	mov	r25, r24
    1270:	91 60       	ori	r25, 0x01	; 1
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	69 2f       	mov	r22, r25
    1276:	0e 94 29 08 	call	0x1052	; 0x1052 <DioSetPortDirection>
    127a:	13 c0       	rjmp	.+38     	; 0x12a2 <sevenSegmentInit+0xae>
		break;
	case portC:
		DioSetPortDirection(portC,PORTC | 0x01);
    127c:	e5 e3       	ldi	r30, 0x35	; 53
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	98 2f       	mov	r25, r24
    1284:	91 60       	ori	r25, 0x01	; 1
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	69 2f       	mov	r22, r25
    128a:	0e 94 29 08 	call	0x1052	; 0x1052 <DioSetPortDirection>
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <sevenSegmentInit+0xae>
		break;
	case portD:
		DioSetPortDirection(portD,PORTD | 0x01);
    1290:	e2 e3       	ldi	r30, 0x32	; 50
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	98 2f       	mov	r25, r24
    1298:	91 60       	ori	r25, 0x01	; 1
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	69 2f       	mov	r22, r25
    129e:	0e 94 29 08 	call	0x1052	; 0x1052 <DioSetPortDirection>
		break;
	}
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <DisplaytoNumber>:
void DisplaytoNumber(u8 Copy_u8port,u16 Copy_u8number)
{
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	c5 57       	subi	r28, 0x75	; 117
    12bc:	d0 40       	sbci	r29, 0x00	; 0
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	fe 01       	movw	r30, r28
    12ca:	ef 58       	subi	r30, 0x8F	; 143
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 83       	st	Z, r24
    12d0:	fe 01       	movw	r30, r28
    12d2:	ee 58       	subi	r30, 0x8E	; 142
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	71 83       	std	Z+1, r23	; 0x01
    12d8:	60 83       	st	Z, r22
	static int count =0;
	count++;
    12da:	80 91 68 00 	lds	r24, 0x0068
    12de:	90 91 69 00 	lds	r25, 0x0069
    12e2:	01 96       	adiw	r24, 0x01	; 1
    12e4:	90 93 69 00 	sts	0x0069, r25
    12e8:	80 93 68 00 	sts	0x0068, r24
	if(count == Copy_u8number)
    12ec:	80 91 68 00 	lds	r24, 0x0068
    12f0:	90 91 69 00 	lds	r25, 0x0069
    12f4:	9c 01       	movw	r18, r24
    12f6:	fe 01       	movw	r30, r28
    12f8:	ee 58       	subi	r30, 0x8E	; 142
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	28 17       	cp	r18, r24
    1302:	39 07       	cpc	r19, r25
    1304:	21 f4       	brne	.+8      	; 0x130e <DisplaytoNumber+0x60>
		{
			count =0;
    1306:	10 92 69 00 	sts	0x0069, r1
    130a:	10 92 68 00 	sts	0x0068, r1
		}
	switch(Copy_u8port)
    130e:	fe 01       	movw	r30, r28
    1310:	ef 58       	subi	r30, 0x8F	; 143
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	e6 96       	adiw	r28, 0x36	; 54
    131c:	3f af       	std	Y+63, r19	; 0x3f
    131e:	2e af       	std	Y+62, r18	; 0x3e
    1320:	e6 97       	sbiw	r28, 0x36	; 54
    1322:	e6 96       	adiw	r28, 0x36	; 54
    1324:	8e ad       	ldd	r24, Y+62	; 0x3e
    1326:	9f ad       	ldd	r25, Y+63	; 0x3f
    1328:	e6 97       	sbiw	r28, 0x36	; 54
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	09 f4       	brne	.+2      	; 0x1332 <DisplaytoNumber+0x84>
    1330:	b8 c1       	rjmp	.+880    	; 0x16a2 <DisplaytoNumber+0x3f4>
    1332:	e6 96       	adiw	r28, 0x36	; 54
    1334:	ee ad       	ldd	r30, Y+62	; 0x3e
    1336:	ff ad       	ldd	r31, Y+63	; 0x3f
    1338:	e6 97       	sbiw	r28, 0x36	; 54
    133a:	e2 30       	cpi	r30, 0x02	; 2
    133c:	f1 05       	cpc	r31, r1
    133e:	44 f4       	brge	.+16     	; 0x1350 <DisplaytoNumber+0xa2>
    1340:	e6 96       	adiw	r28, 0x36	; 54
    1342:	2e ad       	ldd	r18, Y+62	; 0x3e
    1344:	3f ad       	ldd	r19, Y+63	; 0x3f
    1346:	e6 97       	sbiw	r28, 0x36	; 54
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	91 f0       	breq	.+36     	; 0x1372 <DisplaytoNumber+0xc4>
    134e:	3e c5       	rjmp	.+2684   	; 0x1dcc <DisplaytoNumber+0xb1e>
    1350:	e6 96       	adiw	r28, 0x36	; 54
    1352:	8e ad       	ldd	r24, Y+62	; 0x3e
    1354:	9f ad       	ldd	r25, Y+63	; 0x3f
    1356:	e6 97       	sbiw	r28, 0x36	; 54
    1358:	82 30       	cpi	r24, 0x02	; 2
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <DisplaytoNumber+0xb2>
    135e:	0b c3       	rjmp	.+1558   	; 0x1976 <DisplaytoNumber+0x6c8>
    1360:	e6 96       	adiw	r28, 0x36	; 54
    1362:	ee ad       	ldd	r30, Y+62	; 0x3e
    1364:	ff ad       	ldd	r31, Y+63	; 0x3f
    1366:	e6 97       	sbiw	r28, 0x36	; 54
    1368:	e3 30       	cpi	r30, 0x03	; 3
    136a:	f1 05       	cpc	r31, r1
    136c:	09 f4       	brne	.+2      	; 0x1370 <DisplaytoNumber+0xc2>
    136e:	19 c4       	rjmp	.+2098   	; 0x1ba2 <DisplaytoNumber+0x8f4>
    1370:	2d c5       	rjmp	.+2650   	; 0x1dcc <DisplaytoNumber+0xb1e>
	{
	case portA:
		DioSetPinValue(portB,PIN0,LOW);
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
			DioSetPortValue(portA,count/10 );//left
    137c:	80 91 68 00 	lds	r24, 0x0068
    1380:	90 91 69 00 	lds	r25, 0x0069
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
    138e:	cb 01       	movw	r24, r22
    1390:	98 2f       	mov	r25, r24
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	69 2f       	mov	r22, r25
    1396:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DioSetPortValue>
    139a:	fe 01       	movw	r30, r28
    139c:	e3 59       	subi	r30, 0x93	; 147
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e2       	ldi	r26, 0x20	; 32
    13a6:	b1 e4       	ldi	r27, 0x41	; 65
    13a8:	80 83       	st	Z, r24
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	a2 83       	std	Z+2, r26	; 0x02
    13ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	8e 01       	movw	r16, r28
    13b2:	07 59       	subi	r16, 0x97	; 151
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	fe 01       	movw	r30, r28
    13b8:	e3 59       	subi	r30, 0x93	; 147
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	4a ef       	ldi	r20, 0xFA	; 250
    13ca:	54 e4       	ldi	r21, 0x44	; 68
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	f8 01       	movw	r30, r16
    13d6:	80 83       	st	Z, r24
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	a2 83       	std	Z+2, r26	; 0x02
    13dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13de:	fe 01       	movw	r30, r28
    13e0:	e7 59       	subi	r30, 0x97	; 151
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e8       	ldi	r20, 0x80	; 128
    13f2:	5f e3       	ldi	r21, 0x3F	; 63
    13f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f8:	88 23       	and	r24, r24
    13fa:	44 f4       	brge	.+16     	; 0x140c <DisplaytoNumber+0x15e>
		__ticks = 1;
    13fc:	fe 01       	movw	r30, r28
    13fe:	e9 59       	subi	r30, 0x99	; 153
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	64 c0       	rjmp	.+200    	; 0x14d4 <DisplaytoNumber+0x226>
	else if (__tmp > 65535)
    140c:	fe 01       	movw	r30, r28
    140e:	e7 59       	subi	r30, 0x97	; 151
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	57 e4       	ldi	r21, 0x47	; 71
    1422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1426:	18 16       	cp	r1, r24
    1428:	0c f0       	brlt	.+2      	; 0x142c <DisplaytoNumber+0x17e>
    142a:	43 c0       	rjmp	.+134    	; 0x14b2 <DisplaytoNumber+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	fe 01       	movw	r30, r28
    142e:	e3 59       	subi	r30, 0x93	; 147
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	60 81       	ld	r22, Z
    1434:	71 81       	ldd	r23, Z+1	; 0x01
    1436:	82 81       	ldd	r24, Z+2	; 0x02
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8e 01       	movw	r16, r28
    144c:	09 59       	subi	r16, 0x99	; 153
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	f8 01       	movw	r30, r16
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	80 83       	st	Z, r24
    1462:	1f c0       	rjmp	.+62     	; 0x14a2 <DisplaytoNumber+0x1f4>
    1464:	fe 01       	movw	r30, r28
    1466:	eb 59       	subi	r30, 0x9B	; 155
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	88 ec       	ldi	r24, 0xC8	; 200
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1472:	fe 01       	movw	r30, r28
    1474:	eb 59       	subi	r30, 0x9B	; 155
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <DisplaytoNumber+0x1ce>
    1480:	fe 01       	movw	r30, r28
    1482:	eb 59       	subi	r30, 0x9B	; 155
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	de 01       	movw	r26, r28
    148c:	a9 59       	subi	r26, 0x99	; 153
    148e:	bf 4f       	sbci	r27, 0xFF	; 255
    1490:	fe 01       	movw	r30, r28
    1492:	e9 59       	subi	r30, 0x99	; 153
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	11 96       	adiw	r26, 0x01	; 1
    149e:	9c 93       	st	X, r25
    14a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a2:	fe 01       	movw	r30, r28
    14a4:	e9 59       	subi	r30, 0x99	; 153
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	d1 f6       	brne	.-76     	; 0x1464 <DisplaytoNumber+0x1b6>
    14b0:	27 c0       	rjmp	.+78     	; 0x1500 <DisplaytoNumber+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b2:	8e 01       	movw	r16, r28
    14b4:	09 59       	subi	r16, 0x99	; 153
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	fe 01       	movw	r30, r28
    14ba:	e7 59       	subi	r30, 0x97	; 151
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	60 81       	ld	r22, Z
    14c0:	71 81       	ldd	r23, Z+1	; 0x01
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	91 83       	std	Z+1, r25	; 0x01
    14d2:	80 83       	st	Z, r24
    14d4:	de 01       	movw	r26, r28
    14d6:	ad 59       	subi	r26, 0x9D	; 157
    14d8:	bf 4f       	sbci	r27, 0xFF	; 255
    14da:	fe 01       	movw	r30, r28
    14dc:	e9 59       	subi	r30, 0x99	; 153
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	91 81       	ldd	r25, Z+1	; 0x01
    14e4:	8d 93       	st	X+, r24
    14e6:	9c 93       	st	X, r25
    14e8:	fe 01       	movw	r30, r28
    14ea:	ed 59       	subi	r30, 0x9D	; 157
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <DisplaytoNumber+0x244>
    14f6:	fe 01       	movw	r30, r28
    14f8:	ed 59       	subi	r30, 0x9D	; 157
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
			_delay_ms(10);
			DioSetPinValue(portB,PIN0,HIGH);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>

			DioSetPinValue(portB,PIN1,LOW);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	61 e0       	ldi	r22, 0x01	; 1
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
			DioSetPortValue(portA,count%10 );//Right
    1514:	80 91 68 00 	lds	r24, 0x0068
    1518:	90 91 69 00 	lds	r25, 0x0069
    151c:	2a e0       	ldi	r18, 0x0A	; 10
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	b9 01       	movw	r22, r18
    1522:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
    1526:	98 2f       	mov	r25, r24
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	69 2f       	mov	r22, r25
    152c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DioSetPortValue>
    1530:	fe 01       	movw	r30, r28
    1532:	e1 5a       	subi	r30, 0xA1	; 161
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	a0 e2       	ldi	r26, 0x20	; 32
    153c:	b1 e4       	ldi	r27, 0x41	; 65
    153e:	80 83       	st	Z, r24
    1540:	91 83       	std	Z+1, r25	; 0x01
    1542:	a2 83       	std	Z+2, r26	; 0x02
    1544:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1546:	8e 01       	movw	r16, r28
    1548:	05 5a       	subi	r16, 0xA5	; 165
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	fe 01       	movw	r30, r28
    154e:	e1 5a       	subi	r30, 0xA1	; 161
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	60 81       	ld	r22, Z
    1554:	71 81       	ldd	r23, Z+1	; 0x01
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	4a ef       	ldi	r20, 0xFA	; 250
    1560:	54 e4       	ldi	r21, 0x44	; 68
    1562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	f8 01       	movw	r30, r16
    156c:	80 83       	st	Z, r24
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	a2 83       	std	Z+2, r26	; 0x02
    1572:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1574:	fe 01       	movw	r30, r28
    1576:	e5 5a       	subi	r30, 0xA5	; 165
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	44 f4       	brge	.+16     	; 0x15a2 <DisplaytoNumber+0x2f4>
		__ticks = 1;
    1592:	fe 01       	movw	r30, r28
    1594:	e7 5a       	subi	r30, 0xA7	; 167
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	80 83       	st	Z, r24
    15a0:	64 c0       	rjmp	.+200    	; 0x166a <DisplaytoNumber+0x3bc>
	else if (__tmp > 65535)
    15a2:	fe 01       	movw	r30, r28
    15a4:	e5 5a       	subi	r30, 0xA5	; 165
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	3f ef       	ldi	r19, 0xFF	; 255
    15b4:	4f e7       	ldi	r20, 0x7F	; 127
    15b6:	57 e4       	ldi	r21, 0x47	; 71
    15b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15bc:	18 16       	cp	r1, r24
    15be:	0c f0       	brlt	.+2      	; 0x15c2 <DisplaytoNumber+0x314>
    15c0:	43 c0       	rjmp	.+134    	; 0x1648 <DisplaytoNumber+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c2:	fe 01       	movw	r30, r28
    15c4:	e1 5a       	subi	r30, 0xA1	; 161
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	60 81       	ld	r22, Z
    15ca:	71 81       	ldd	r23, Z+1	; 0x01
    15cc:	82 81       	ldd	r24, Z+2	; 0x02
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e2       	ldi	r20, 0x20	; 32
    15d6:	51 e4       	ldi	r21, 0x41	; 65
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	8e 01       	movw	r16, r28
    15e2:	07 5a       	subi	r16, 0xA7	; 167
    15e4:	1f 4f       	sbci	r17, 0xFF	; 255
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	f8 01       	movw	r30, r16
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	80 83       	st	Z, r24
    15f8:	1f c0       	rjmp	.+62     	; 0x1638 <DisplaytoNumber+0x38a>
    15fa:	fe 01       	movw	r30, r28
    15fc:	e9 5a       	subi	r30, 0xA9	; 169
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	88 ec       	ldi	r24, 0xC8	; 200
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
    1608:	fe 01       	movw	r30, r28
    160a:	e9 5a       	subi	r30, 0xA9	; 169
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <DisplaytoNumber+0x364>
    1616:	fe 01       	movw	r30, r28
    1618:	e9 5a       	subi	r30, 0xA9	; 169
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1620:	de 01       	movw	r26, r28
    1622:	a7 5a       	subi	r26, 0xA7	; 167
    1624:	bf 4f       	sbci	r27, 0xFF	; 255
    1626:	fe 01       	movw	r30, r28
    1628:	e7 5a       	subi	r30, 0xA7	; 167
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	11 96       	adiw	r26, 0x01	; 1
    1634:	9c 93       	st	X, r25
    1636:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	fe 01       	movw	r30, r28
    163a:	e7 5a       	subi	r30, 0xA7	; 167
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	d1 f6       	brne	.-76     	; 0x15fa <DisplaytoNumber+0x34c>
    1646:	27 c0       	rjmp	.+78     	; 0x1696 <DisplaytoNumber+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1648:	8e 01       	movw	r16, r28
    164a:	07 5a       	subi	r16, 0xA7	; 167
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	fe 01       	movw	r30, r28
    1650:	e5 5a       	subi	r30, 0xA5	; 165
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	f8 01       	movw	r30, r16
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
    166a:	de 01       	movw	r26, r28
    166c:	ab 5a       	subi	r26, 0xAB	; 171
    166e:	bf 4f       	sbci	r27, 0xFF	; 255
    1670:	fe 01       	movw	r30, r28
    1672:	e7 5a       	subi	r30, 0xA7	; 167
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	8d 93       	st	X+, r24
    167c:	9c 93       	st	X, r25
    167e:	fe 01       	movw	r30, r28
    1680:	eb 5a       	subi	r30, 0xAB	; 171
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <DisplaytoNumber+0x3da>
    168c:	fe 01       	movw	r30, r28
    168e:	eb 5a       	subi	r30, 0xAB	; 171
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	80 83       	st	Z, r24
			_delay_ms(10);
			DioSetPinValue(portB,PIN1,HIGH);
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
    16a0:	95 c3       	rjmp	.+1834   	; 0x1dcc <DisplaytoNumber+0xb1e>
		break;
	case portB:
		DioSetPinValue(portB,PIN0,LOW);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
			DioSetPortValue(portB,count/10 );//left
    16ac:	80 91 68 00 	lds	r24, 0x0068
    16b0:	90 91 69 00 	lds	r25, 0x0069
    16b4:	2a e0       	ldi	r18, 0x0A	; 10
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	b9 01       	movw	r22, r18
    16ba:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
    16be:	cb 01       	movw	r24, r22
    16c0:	98 2f       	mov	r25, r24
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	69 2f       	mov	r22, r25
    16c6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DioSetPortValue>
    16ca:	fe 01       	movw	r30, r28
    16cc:	ef 5a       	subi	r30, 0xAF	; 175
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 e2       	ldi	r26, 0x20	; 32
    16d6:	b1 e4       	ldi	r27, 0x41	; 65
    16d8:	80 83       	st	Z, r24
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	a2 83       	std	Z+2, r26	; 0x02
    16de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	8e 01       	movw	r16, r28
    16e2:	03 5b       	subi	r16, 0xB3	; 179
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	fe 01       	movw	r30, r28
    16e8:	ef 5a       	subi	r30, 0xAF	; 175
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4a ef       	ldi	r20, 0xFA	; 250
    16fa:	54 e4       	ldi	r21, 0x44	; 68
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	f8 01       	movw	r30, r16
    1706:	80 83       	st	Z, r24
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	a2 83       	std	Z+2, r26	; 0x02
    170c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    170e:	fe 01       	movw	r30, r28
    1710:	e3 5b       	subi	r30, 0xB3	; 179
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	44 f4       	brge	.+16     	; 0x173c <DisplaytoNumber+0x48e>
		__ticks = 1;
    172c:	fe 01       	movw	r30, r28
    172e:	e5 5b       	subi	r30, 0xB5	; 181
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	80 83       	st	Z, r24
    173a:	64 c0       	rjmp	.+200    	; 0x1804 <DisplaytoNumber+0x556>
	else if (__tmp > 65535)
    173c:	fe 01       	movw	r30, r28
    173e:	e3 5b       	subi	r30, 0xB3	; 179
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	0c f0       	brlt	.+2      	; 0x175c <DisplaytoNumber+0x4ae>
    175a:	43 c0       	rjmp	.+134    	; 0x17e2 <DisplaytoNumber+0x534>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175c:	fe 01       	movw	r30, r28
    175e:	ef 5a       	subi	r30, 0xAF	; 175
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8e 01       	movw	r16, r28
    177c:	05 5b       	subi	r16, 0xB5	; 181
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	91 83       	std	Z+1, r25	; 0x01
    1790:	80 83       	st	Z, r24
    1792:	1f c0       	rjmp	.+62     	; 0x17d2 <DisplaytoNumber+0x524>
    1794:	fe 01       	movw	r30, r28
    1796:	e7 5b       	subi	r30, 0xB7	; 183
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	88 ec       	ldi	r24, 0xC8	; 200
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	91 83       	std	Z+1, r25	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	fe 01       	movw	r30, r28
    17a4:	e7 5b       	subi	r30, 0xB7	; 183
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <DisplaytoNumber+0x4fe>
    17b0:	fe 01       	movw	r30, r28
    17b2:	e7 5b       	subi	r30, 0xB7	; 183
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ba:	de 01       	movw	r26, r28
    17bc:	a5 5b       	subi	r26, 0xB5	; 181
    17be:	bf 4f       	sbci	r27, 0xFF	; 255
    17c0:	fe 01       	movw	r30, r28
    17c2:	e5 5b       	subi	r30, 0xB5	; 181
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	80 81       	ld	r24, Z
    17c8:	91 81       	ldd	r25, Z+1	; 0x01
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	11 96       	adiw	r26, 0x01	; 1
    17ce:	9c 93       	st	X, r25
    17d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d2:	fe 01       	movw	r30, r28
    17d4:	e5 5b       	subi	r30, 0xB5	; 181
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	d1 f6       	brne	.-76     	; 0x1794 <DisplaytoNumber+0x4e6>
    17e0:	27 c0       	rjmp	.+78     	; 0x1830 <DisplaytoNumber+0x582>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e2:	8e 01       	movw	r16, r28
    17e4:	05 5b       	subi	r16, 0xB5	; 181
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
    17e8:	fe 01       	movw	r30, r28
    17ea:	e3 5b       	subi	r30, 0xB3	; 179
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	f8 01       	movw	r30, r16
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	80 83       	st	Z, r24
    1804:	de 01       	movw	r26, r28
    1806:	a9 5b       	subi	r26, 0xB9	; 185
    1808:	bf 4f       	sbci	r27, 0xFF	; 255
    180a:	fe 01       	movw	r30, r28
    180c:	e5 5b       	subi	r30, 0xB5	; 181
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	8d 93       	st	X+, r24
    1816:	9c 93       	st	X, r25
    1818:	fe 01       	movw	r30, r28
    181a:	e9 5b       	subi	r30, 0xB9	; 185
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <DisplaytoNumber+0x574>
    1826:	fe 01       	movw	r30, r28
    1828:	e9 5b       	subi	r30, 0xB9	; 185
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
			_delay_ms(10);
			DioSetPinValue(portB,PIN0,HIGH);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>

			DioSetPinValue(portB,PIN1,LOW);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
			DioSetPortValue(portB,count%10 );//Right
    1844:	80 91 68 00 	lds	r24, 0x0068
    1848:	90 91 69 00 	lds	r25, 0x0069
    184c:	2a e0       	ldi	r18, 0x0A	; 10
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	b9 01       	movw	r22, r18
    1852:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
    1856:	98 2f       	mov	r25, r24
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	69 2f       	mov	r22, r25
    185c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DioSetPortValue>
    1860:	fe 01       	movw	r30, r28
    1862:	ed 5b       	subi	r30, 0xBD	; 189
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e2       	ldi	r26, 0x20	; 32
    186c:	b1 e4       	ldi	r27, 0x41	; 65
    186e:	80 83       	st	Z, r24
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	a2 83       	std	Z+2, r26	; 0x02
    1874:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	8e 01       	movw	r16, r28
    1878:	01 5c       	subi	r16, 0xC1	; 193
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	fe 01       	movw	r30, r28
    187e:	ed 5b       	subi	r30, 0xBD	; 189
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a ef       	ldi	r20, 0xFA	; 250
    1890:	54 e4       	ldi	r21, 0x44	; 68
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	f8 01       	movw	r30, r16
    189c:	80 83       	st	Z, r24
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	a2 83       	std	Z+2, r26	; 0x02
    18a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18a4:	fe 01       	movw	r30, r28
    18a6:	ff 96       	adiw	r30, 0x3f	; 63
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e8       	ldi	r20, 0x80	; 128
    18b6:	5f e3       	ldi	r21, 0x3F	; 63
    18b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18bc:	88 23       	and	r24, r24
    18be:	2c f4       	brge	.+10     	; 0x18ca <DisplaytoNumber+0x61c>
		__ticks = 1;
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9e af       	std	Y+62, r25	; 0x3e
    18c6:	8d af       	std	Y+61, r24	; 0x3d
    18c8:	46 c0       	rjmp	.+140    	; 0x1956 <DisplaytoNumber+0x6a8>
	else if (__tmp > 65535)
    18ca:	fe 01       	movw	r30, r28
    18cc:	ff 96       	adiw	r30, 0x3f	; 63
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	3f ef       	ldi	r19, 0xFF	; 255
    18da:	4f e7       	ldi	r20, 0x7F	; 127
    18dc:	57 e4       	ldi	r21, 0x47	; 71
    18de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	64 f5       	brge	.+88     	; 0x193e <DisplaytoNumber+0x690>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e6:	fe 01       	movw	r30, r28
    18e8:	ed 5b       	subi	r30, 0xBD	; 189
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9e af       	std	Y+62, r25	; 0x3e
    1912:	8d af       	std	Y+61, r24	; 0x3d
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <DisplaytoNumber+0x686>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9c af       	std	Y+60, r25	; 0x3c
    191c:	8b af       	std	Y+59, r24	; 0x3b
    191e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1920:	9c ad       	ldd	r25, Y+60	; 0x3c
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <DisplaytoNumber+0x674>
    1926:	9c af       	std	Y+60, r25	; 0x3c
    1928:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8d ad       	ldd	r24, Y+61	; 0x3d
    192c:	9e ad       	ldd	r25, Y+62	; 0x3e
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9e af       	std	Y+62, r25	; 0x3e
    1932:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8d ad       	ldd	r24, Y+61	; 0x3d
    1936:	9e ad       	ldd	r25, Y+62	; 0x3e
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <DisplaytoNumber+0x668>
    193c:	16 c0       	rjmp	.+44     	; 0x196a <DisplaytoNumber+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	fe 01       	movw	r30, r28
    1940:	ff 96       	adiw	r30, 0x3f	; 63
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9e af       	std	Y+62, r25	; 0x3e
    1954:	8d af       	std	Y+61, r24	; 0x3d
    1956:	8d ad       	ldd	r24, Y+61	; 0x3d
    1958:	9e ad       	ldd	r25, Y+62	; 0x3e
    195a:	9a af       	std	Y+58, r25	; 0x3a
    195c:	89 af       	std	Y+57, r24	; 0x39
    195e:	89 ad       	ldd	r24, Y+57	; 0x39
    1960:	9a ad       	ldd	r25, Y+58	; 0x3a
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <DisplaytoNumber+0x6b4>
    1966:	9a af       	std	Y+58, r25	; 0x3a
    1968:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);
			DioSetPinValue(portB,PIN1,HIGH);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
    1974:	2b c2       	rjmp	.+1110   	; 0x1dcc <DisplaytoNumber+0xb1e>
		break;
	case portC:
		DioSetPinValue(portB,PIN0,LOW);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
		DioSetPortValue(portC,count/10 );//left
    1980:	80 91 68 00 	lds	r24, 0x0068
    1984:	90 91 69 00 	lds	r25, 0x0069
    1988:	2a e0       	ldi	r18, 0x0A	; 10
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	b9 01       	movw	r22, r18
    198e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
    1992:	cb 01       	movw	r24, r22
    1994:	98 2f       	mov	r25, r24
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	69 2f       	mov	r22, r25
    199a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DioSetPortValue>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a0 e2       	ldi	r26, 0x20	; 32
    19a4:	b1 e4       	ldi	r27, 0x41	; 65
    19a6:	8d ab       	std	Y+53, r24	; 0x35
    19a8:	9e ab       	std	Y+54, r25	; 0x36
    19aa:	af ab       	std	Y+55, r26	; 0x37
    19ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	6d a9       	ldd	r22, Y+53	; 0x35
    19b0:	7e a9       	ldd	r23, Y+54	; 0x36
    19b2:	8f a9       	ldd	r24, Y+55	; 0x37
    19b4:	98 ad       	ldd	r25, Y+56	; 0x38
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a ef       	ldi	r20, 0xFA	; 250
    19bc:	54 e4       	ldi	r21, 0x44	; 68
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	89 ab       	std	Y+49, r24	; 0x31
    19c8:	9a ab       	std	Y+50, r25	; 0x32
    19ca:	ab ab       	std	Y+51, r26	; 0x33
    19cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <DisplaytoNumber+0x742>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	98 ab       	std	Y+48, r25	; 0x30
    19ec:	8f a7       	std	Y+47, r24	; 0x2f
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <DisplaytoNumber+0x7c0>
	else if (__tmp > 65535)
    19f0:	69 a9       	ldd	r22, Y+49	; 0x31
    19f2:	7a a9       	ldd	r23, Y+50	; 0x32
    19f4:	8b a9       	ldd	r24, Y+51	; 0x33
    19f6:	9c a9       	ldd	r25, Y+52	; 0x34
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <DisplaytoNumber+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	6d a9       	ldd	r22, Y+53	; 0x35
    1a0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	98 ab       	std	Y+48, r25	; 0x30
    1a2e:	8f a7       	std	Y+47, r24	; 0x2f
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <DisplaytoNumber+0x7a2>
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9e a7       	std	Y+46, r25	; 0x2e
    1a38:	8d a7       	std	Y+45, r24	; 0x2d
    1a3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <DisplaytoNumber+0x790>
    1a42:	9e a7       	std	Y+46, r25	; 0x2e
    1a44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a48:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	98 ab       	std	Y+48, r25	; 0x30
    1a4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a52:	98 a9       	ldd	r25, Y+48	; 0x30
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <DisplaytoNumber+0x784>
    1a58:	14 c0       	rjmp	.+40     	; 0x1a82 <DisplaytoNumber+0x7d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a60:	9c a9       	ldd	r25, Y+52	; 0x34
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	98 ab       	std	Y+48, r25	; 0x30
    1a6c:	8f a7       	std	Y+47, r24	; 0x2f
    1a6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a70:	98 a9       	ldd	r25, Y+48	; 0x30
    1a72:	9c a7       	std	Y+44, r25	; 0x2c
    1a74:	8b a7       	std	Y+43, r24	; 0x2b
    1a76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a78:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <DisplaytoNumber+0x7cc>
    1a7e:	9c a7       	std	Y+44, r25	; 0x2c
    1a80:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		DioSetPinValue(portB,PIN0,HIGH);
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>

		DioSetPinValue(portB,PIN1,LOW);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
		DioSetPortValue(portC,count%10 );//Right
    1a96:	80 91 68 00 	lds	r24, 0x0068
    1a9a:	90 91 69 00 	lds	r25, 0x0069
    1a9e:	2a e0       	ldi	r18, 0x0A	; 10
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	b9 01       	movw	r22, r18
    1aa4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	69 2f       	mov	r22, r25
    1aae:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DioSetPortValue>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a0 e2       	ldi	r26, 0x20	; 32
    1ab8:	b1 e4       	ldi	r27, 0x41	; 65
    1aba:	8f a3       	std	Y+39, r24	; 0x27
    1abc:	98 a7       	std	Y+40, r25	; 0x28
    1abe:	a9 a7       	std	Y+41, r26	; 0x29
    1ac0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ac4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ac6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ac8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	4a ef       	ldi	r20, 0xFA	; 250
    1ad0:	54 e4       	ldi	r21, 0x44	; 68
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	8b a3       	std	Y+35, r24	; 0x23
    1adc:	9c a3       	std	Y+36, r25	; 0x24
    1ade:	ad a3       	std	Y+37, r26	; 0x25
    1ae0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <DisplaytoNumber+0x856>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9a a3       	std	Y+34, r25	; 0x22
    1b00:	89 a3       	std	Y+33, r24	; 0x21
    1b02:	3f c0       	rjmp	.+126    	; 0x1b82 <DisplaytoNumber+0x8d4>
	else if (__tmp > 65535)
    1b04:	6b a1       	ldd	r22, Y+35	; 0x23
    1b06:	7c a1       	ldd	r23, Y+36	; 0x24
    1b08:	8d a1       	ldd	r24, Y+37	; 0x25
    1b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	3f ef       	ldi	r19, 0xFF	; 255
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	4c f5       	brge	.+82     	; 0x1b6e <DisplaytoNumber+0x8c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b20:	89 a5       	ldd	r24, Y+41	; 0x29
    1b22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	51 e4       	ldi	r21, 0x41	; 65
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	bc 01       	movw	r22, r24
    1b36:	cd 01       	movw	r24, r26
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9a a3       	std	Y+34, r25	; 0x22
    1b42:	89 a3       	std	Y+33, r24	; 0x21
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <DisplaytoNumber+0x8b6>
    1b46:	88 ec       	ldi	r24, 0xC8	; 200
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	98 a3       	std	Y+32, r25	; 0x20
    1b4c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b50:	98 a1       	ldd	r25, Y+32	; 0x20
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <DisplaytoNumber+0x8a4>
    1b56:	98 a3       	std	Y+32, r25	; 0x20
    1b58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	9a a3       	std	Y+34, r25	; 0x22
    1b62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b64:	89 a1       	ldd	r24, Y+33	; 0x21
    1b66:	9a a1       	ldd	r25, Y+34	; 0x22
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <DisplaytoNumber+0x898>
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <DisplaytoNumber+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b70:	7c a1       	ldd	r23, Y+36	; 0x24
    1b72:	8d a1       	ldd	r24, Y+37	; 0x25
    1b74:	9e a1       	ldd	r25, Y+38	; 0x26
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9a a3       	std	Y+34, r25	; 0x22
    1b80:	89 a3       	std	Y+33, r24	; 0x21
    1b82:	89 a1       	ldd	r24, Y+33	; 0x21
    1b84:	9a a1       	ldd	r25, Y+34	; 0x22
    1b86:	9e 8f       	std	Y+30, r25	; 0x1e
    1b88:	8d 8f       	std	Y+29, r24	; 0x1d
    1b8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <DisplaytoNumber+0x8e0>
    1b92:	9e 8f       	std	Y+30, r25	; 0x1e
    1b94:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DioSetPinValue(portB,PIN1,HIGH);
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	61 e0       	ldi	r22, 0x01	; 1
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
    1ba0:	15 c1       	rjmp	.+554    	; 0x1dcc <DisplaytoNumber+0xb1e>

		break;
	case portD:
		DioSetPinValue(portB,PIN0,LOW);
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
			DioSetPortValue(portD,count/10 );//left
    1bac:	80 91 68 00 	lds	r24, 0x0068
    1bb0:	90 91 69 00 	lds	r25, 0x0069
    1bb4:	2a e0       	ldi	r18, 0x0A	; 10
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	b9 01       	movw	r22, r18
    1bba:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	69 2f       	mov	r22, r25
    1bc6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DioSetPortValue>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e2       	ldi	r26, 0x20	; 32
    1bd0:	b1 e4       	ldi	r27, 0x41	; 65
    1bd2:	89 8f       	std	Y+25, r24	; 0x19
    1bd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1bd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1bd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	69 8d       	ldd	r22, Y+25	; 0x19
    1bdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a ef       	ldi	r20, 0xFA	; 250
    1be8:	54 e4       	ldi	r21, 0x44	; 68
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8d 8b       	std	Y+21, r24	; 0x15
    1bf4:	9e 8b       	std	Y+22, r25	; 0x16
    1bf6:	af 8b       	std	Y+23, r26	; 0x17
    1bf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1c00:	98 8d       	ldd	r25, Y+24	; 0x18
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <DisplaytoNumber+0x96e>
		__ticks = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 8b       	std	Y+20, r25	; 0x14
    1c18:	8b 8b       	std	Y+19, r24	; 0x13
    1c1a:	3f c0       	rjmp	.+126    	; 0x1c9a <DisplaytoNumber+0x9ec>
	else if (__tmp > 65535)
    1c1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	57 e4       	ldi	r21, 0x47	; 71
    1c2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	4c f5       	brge	.+82     	; 0x1c86 <DisplaytoNumber+0x9d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c34:	69 8d       	ldd	r22, Y+25	; 0x19
    1c36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9c 8b       	std	Y+20, r25	; 0x14
    1c5a:	8b 8b       	std	Y+19, r24	; 0x13
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <DisplaytoNumber+0x9ce>
    1c5e:	88 ec       	ldi	r24, 0xC8	; 200
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9a 8b       	std	Y+18, r25	; 0x12
    1c64:	89 8b       	std	Y+17, r24	; 0x11
    1c66:	89 89       	ldd	r24, Y+17	; 0x11
    1c68:	9a 89       	ldd	r25, Y+18	; 0x12
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <DisplaytoNumber+0x9bc>
    1c6e:	9a 8b       	std	Y+18, r25	; 0x12
    1c70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f7       	brne	.-38     	; 0x1c5e <DisplaytoNumber+0x9b0>
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <DisplaytoNumber+0xa00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c86:	6d 89       	ldd	r22, Y+21	; 0x15
    1c88:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9c 8b       	std	Y+20, r25	; 0x14
    1c98:	8b 8b       	std	Y+19, r24	; 0x13
    1c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9e:	98 8b       	std	Y+16, r25	; 0x10
    1ca0:	8f 87       	std	Y+15, r24	; 0x0f
    1ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca4:	98 89       	ldd	r25, Y+16	; 0x10
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <DisplaytoNumber+0x9f8>
    1caa:	98 8b       	std	Y+16, r25	; 0x10
    1cac:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			DioSetPinValue(portB,PIN0,HIGH);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>

			DioSetPinValue(portB,PIN1,LOW);
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
			DioSetPortValue(portD,count%10 );//Right
    1cc2:	80 91 68 00 	lds	r24, 0x0068
    1cc6:	90 91 69 00 	lds	r25, 0x0069
    1cca:	2a e0       	ldi	r18, 0x0A	; 10
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	b9 01       	movw	r22, r18
    1cd0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <__divmodhi4>
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	69 2f       	mov	r22, r25
    1cda:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <DioSetPortValue>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e2       	ldi	r26, 0x20	; 32
    1ce4:	b1 e4       	ldi	r27, 0x41	; 65
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	9c 87       	std	Y+12, r25	; 0x0c
    1cea:	ad 87       	std	Y+13, r26	; 0x0d
    1cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a ef       	ldi	r20, 0xFA	; 250
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	a9 87       	std	Y+9, r26	; 0x09
    1d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <DisplaytoNumber+0xa82>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <DisplaytoNumber+0xb00>
	else if (__tmp > 65535)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <DisplaytoNumber+0xaec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <DisplaytoNumber+0xae2>
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <DisplaytoNumber+0xad0>
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <DisplaytoNumber+0xac4>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <DisplaytoNumber+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <DisplaytoNumber+0xb0c>
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			DioSetPinValue(portB,PIN1,HIGH);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <DioSetPinValue>
			break;
	default:
		break;
	}

}
    1dcc:	cb 58       	subi	r28, 0x8B	; 139
    1dce:	df 4f       	sbci	r29, 0xFF	; 255
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <__divmodhi4>:
    1de4:	97 fb       	bst	r25, 7
    1de6:	09 2e       	mov	r0, r25
    1de8:	07 26       	eor	r0, r23
    1dea:	0a d0       	rcall	.+20     	; 0x1e00 <__divmodhi4_neg1>
    1dec:	77 fd       	sbrc	r23, 7
    1dee:	04 d0       	rcall	.+8      	; 0x1df8 <__divmodhi4_neg2>
    1df0:	0c d0       	rcall	.+24     	; 0x1e0a <__udivmodhi4>
    1df2:	06 d0       	rcall	.+12     	; 0x1e00 <__divmodhi4_neg1>
    1df4:	00 20       	and	r0, r0
    1df6:	1a f4       	brpl	.+6      	; 0x1dfe <__divmodhi4_exit>

00001df8 <__divmodhi4_neg2>:
    1df8:	70 95       	com	r23
    1dfa:	61 95       	neg	r22
    1dfc:	7f 4f       	sbci	r23, 0xFF	; 255

00001dfe <__divmodhi4_exit>:
    1dfe:	08 95       	ret

00001e00 <__divmodhi4_neg1>:
    1e00:	f6 f7       	brtc	.-4      	; 0x1dfe <__divmodhi4_exit>
    1e02:	90 95       	com	r25
    1e04:	81 95       	neg	r24
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	08 95       	ret

00001e0a <__udivmodhi4>:
    1e0a:	aa 1b       	sub	r26, r26
    1e0c:	bb 1b       	sub	r27, r27
    1e0e:	51 e1       	ldi	r21, 0x11	; 17
    1e10:	07 c0       	rjmp	.+14     	; 0x1e20 <__udivmodhi4_ep>

00001e12 <__udivmodhi4_loop>:
    1e12:	aa 1f       	adc	r26, r26
    1e14:	bb 1f       	adc	r27, r27
    1e16:	a6 17       	cp	r26, r22
    1e18:	b7 07       	cpc	r27, r23
    1e1a:	10 f0       	brcs	.+4      	; 0x1e20 <__udivmodhi4_ep>
    1e1c:	a6 1b       	sub	r26, r22
    1e1e:	b7 0b       	sbc	r27, r23

00001e20 <__udivmodhi4_ep>:
    1e20:	88 1f       	adc	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	5a 95       	dec	r21
    1e26:	a9 f7       	brne	.-22     	; 0x1e12 <__udivmodhi4_loop>
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	08 95       	ret

00001e32 <__prologue_saves__>:
    1e32:	2f 92       	push	r2
    1e34:	3f 92       	push	r3
    1e36:	4f 92       	push	r4
    1e38:	5f 92       	push	r5
    1e3a:	6f 92       	push	r6
    1e3c:	7f 92       	push	r7
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
    1e5a:	ca 1b       	sub	r28, r26
    1e5c:	db 0b       	sbc	r29, r27
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	09 94       	ijmp

00001e6a <__epilogue_restores__>:
    1e6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1e6c:	39 88       	ldd	r3, Y+17	; 0x11
    1e6e:	48 88       	ldd	r4, Y+16	; 0x10
    1e70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1e80:	df 80       	ldd	r13, Y+7	; 0x07
    1e82:	ee 80       	ldd	r14, Y+6	; 0x06
    1e84:	fd 80       	ldd	r15, Y+5	; 0x05
    1e86:	0c 81       	ldd	r16, Y+4	; 0x04
    1e88:	1b 81       	ldd	r17, Y+3	; 0x03
    1e8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1e8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e8e:	ce 0f       	add	r28, r30
    1e90:	d1 1d       	adc	r29, r1
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	ed 01       	movw	r28, r26
    1e9e:	08 95       	ret

00001ea0 <_exit>:
    1ea0:	f8 94       	cli

00001ea2 <__stop_program>:
    1ea2:	ff cf       	rjmp	.-2      	; 0x1ea2 <__stop_program>
