
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  0000027c  2**0
                  ALLOC
  3 .stab         00000414  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000396  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 65 00 	call	0xca	; 0xca <main>
  8a:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GLobalInterruptEnable>:
#include "STD_Types.h"
#include "BIT_MATH.h"

#include "Global_Interface.h"
void GLobalInterruptEnable()
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_BIT);
  9a:	af e5       	ldi	r26, 0x5F	; 95
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8c 93       	st	X, r24

}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <GLobalInterruptDisable>:
void GLobalInterruptDisable()
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_BIT);
  b6:	af e5       	ldi	r26, 0x5F	; 95
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ef e5       	ldi	r30, 0x5F	; 95
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	8c 93       	st	X, r24
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <main>:

void (*callback_ptr)(void) = LED_Toggle;
//void callBackfn(void);

int main(void)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRA,0);
  d2:	aa e3       	ldi	r26, 0x3A	; 58
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	ea e3       	ldi	r30, 0x3A	; 58
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	8c 93       	st	X, r24
	TimerCTC_Init();
  e0:	0e 94 75 00 	call	0xea	; 0xea <TimerCTC_Init>
	GLobalInterruptEnable();
  e4:	0e 94 49 00 	call	0x92	; 0x92 <GLobalInterruptEnable>
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x1e>

000000ea <TimerCTC_Init>:
	}

	return (int)0;
}

void TimerCTC_Init(void){
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
	// Timer0 on CTC mode
	SET_BIT(TCCR0,3);
  f2:	a3 e5       	ldi	r26, 0x53	; 83
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e3 e5       	ldi	r30, 0x53	; 83
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
 100:	a3 e5       	ldi	r26, 0x53	; 83
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e3 e5       	ldi	r30, 0x53	; 83
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	8c 93       	st	X, r24

	// prescaler divided by 64
	SET_BIT(TCCR0,0);
 10e:	a3 e5       	ldi	r26, 0x53	; 83
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e3 e5       	ldi	r30, 0x53	; 83
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
 11c:	a3 e5       	ldi	r26, 0x53	; 83
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e3 e5       	ldi	r30, 0x53	; 83
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
 12a:	a3 e5       	ldi	r26, 0x53	; 83
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e3 e5       	ldi	r30, 0x53	; 83
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	8c 93       	st	X, r24

	// Enable interrupt
	SET_BIT(TIMSK,1);
 138:	a9 e5       	ldi	r26, 0x59	; 89
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e9 e5       	ldi	r30, 0x59	; 89
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	8c 93       	st	X, r24

	/* Set OCR make a 2 sec */
	OCR0 = 250;
 146:	ec e5       	ldi	r30, 0x5C	; 92
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	8a ef       	ldi	r24, 0xFA	; 250
 14c:	80 83       	st	Z, r24
	//TCNT0 = 0;
}
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <__vector_10>:
void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	static u8 counter =0;
	counter++;
 17e:	80 91 62 00 	lds	r24, 0x0062
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 93 62 00 	sts	0x0062, r24
	if(counter == 250)
 188:	80 91 62 00 	lds	r24, 0x0062
 18c:	8a 3f       	cpi	r24, 0xFA	; 250
 18e:	39 f4       	brne	.+14     	; 0x19e <__vector_10+0x4a>
	{
		callback_ptr();
 190:	e0 91 60 00 	lds	r30, 0x0060
 194:	f0 91 61 00 	lds	r31, 0x0061
 198:	09 95       	icall
		counter =0;
 19a:	10 92 62 00 	sts	0x0062, r1
	else
	{
		// do nothing
	}

}
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <LED_Toggle>:
void LED_Toggle(void)
{
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
	PORTA ^= 1;
 1cc:	ab e3       	ldi	r26, 0x3B	; 59
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	eb e3       	ldi	r30, 0x3B	; 59
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	90 81       	ld	r25, Z
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	89 27       	eor	r24, r25
 1da:	8c 93       	st	X, r24
}
 1dc:	cf 91       	pop	r28
 1de:	df 91       	pop	r29
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
